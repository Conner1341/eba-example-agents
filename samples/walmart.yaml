version: 2
description: |+
  Demo agent based on [Walmart Open API](https://developer.walmartlabs.com)

  You can try questions like:
  - what's trending now?
  - show me popular products
  - show me top 5 of these products
  - show me price for the first of them
  - show me top 5 popular products sorted by price
  - what is average price for them?
  - what is description sentiment for the first product?
  - show me popular products with negative description
  - show me popular products with positive description

settings:
  - name: apiKey
    value: your-api-key-here
    notes: 'Get your API key at https://developer.walmartlabs.com/'
concepts:
  - name: 'wmt:TrendingNow'
  - name: ':Showable'
  - name: ':NumAttribute'
  - name: 'wmt:MSRP'
    spelling: msrp
    ontology:
      subClassOf:
        - ':NumAttribute'
        - ':Attribute'
  - name: 'wmt:SalePrice'
    spelling: sale price
    ontology:
      subClassOf:
        - ':Attribute'
        - ':NumAttribute'
  - name: ':Attribute'
  - name: ''
  - name: 'wmt:Trending'
  - name: 'wmt:SalePriceValue'
  - name: ':StrAttribute'
  - name: ':What'
  - name: 'wmt:Description'
    spelling: description
    ontology:
      subClassOf:
        - ':StrAttribute'
        - ':Attribute'
  - name: ':Timeframe'
  - name: 'wmt:Product'
    spelling: product
    ontology:
      subClassOf: ':Showable'
    attributes:
      'wmt:MSRP': msrp
      'wmt:SalePrice': salePrice
      'wmt:Description': shortDescription
  - name: 'wmt:Products'
    spelling: products|*
    ontology:
      isListOf: 'wmt:Product'
      subClassOf: ':Showable'
patterns:
  - '{what''s|:What} {trending now|wmt:TrendingNow}'
  - 'show {price|wmt:SalePrice} for this product'
  - 'show {msrp|wmt:MSRP} for this product'
  - 'what is {description|wmt:Description} for this product?'
  - 'show {trending|wmt:Trending} {products|wmt:Products}'
  - 'show {popular|wmt:Trending} products'
actions:
  - name: getTrendingProducts
    signature: 'wmt:Products (wmt:Trending) -> data wmt:Products'
    kind: 'nodejs:8'
    code: |-
      const request = require('request-promise-native')
      const {Result} = require('eba');

      const main = ({settings}) => {
        return request
          .get(`http://api.walmartlabs.com/v1/trends?apiKey=${settings.apiKey}`)
          .then(JSON.parse)
          .then(({items}) => {
            items.forEach((item) => {
              if (!item.shortDescription)
                item.shortDescription = ""
            })
            return new Result().setData('wmt:Products', items);
          });
      }
      module.exports = {main}
rules:
  - name: rule
    signature: 'wmt:TrendingNow -> wmt:Trending (wmt:Products)'
statics:
  - name: wmt/products.jsx
    mime: text/jsx
    text: |
      wmt_ProductsData = ({data}) => {
        return (
          <div className="wmt-products">
            { data.map((item) =>
              React.createElement(
                wmt_ProductData,
                {data:item, key:item.itemId})) }
          </div>)
      }

      wmt_ProductData = ({data}) => {
        const item = data
        return (
          <div key={item.itemId} className="wmt-product">
            <div className="wmt-product-info">
              <a href={item.addToCartUrl} target="_blank" className="wmt-product-info-image">
                <img src={item.mediumImage}/>
              </a>
              <div className="wmt-product-info-name">
                <p><strong>{item.name}</strong></p>
                <p>
                  {new Number(item.salePrice)
                    .toLocaleString("en-US", {
                        style: "currency",
                        currency: "USD"})
                    .replace(/\.00/,"")}
                  {item.msrp && item.salePrice/item.msrp < 0.99 ?
                    <span> {"\u2014 "}
                      <span className="wmt-product-discount">
                        {new Number(1-item.salePrice/item.msrp)
                          .toLocaleString("en-US", {style: "percent"})}
                        {" off MSRP"}
                      </span>
                    </span> : null}
                </p>
              </div>
            </div>
            <div className="wmt-product-info-description">
              <div dangerouslySetInnerHTML={{__html:wmt_decodeHTMLEntities(item.shortDescription
      )}}/>
            </div>
          </div>)
      }

      wmt_decodeHTMLEntities = (encoded) => {
        if (encoded) {
          var elem = document.createElement('textarea')
          elem.innerHTML = encoded.replace(/[\uFFFD]/g,' ')
          return elem.value
        }
        else return ""
      }
    frontend: true
    backend: false
  - name: wmt/product.css
    mime: text/css
    text: |-
      .wmt-product {
        margin-bottom: 20px;
      }
      .wmt-product:last-child {
        margin-bottom: 0;
      }
      .wmt-product-info {
        display: flex;
        align-items: center;
        margin-bottom: 10px;
      }
      .wmt-product-info img {
        max-width: 100px;
        margin-right: 15px;
      }
      .wmt-product-discount {
        color: red;
      }
      .wmt-product-info-description {
        display: block;
        overflow: hidden;
        line-height: 16px;
        max-height: calc(16px * 5);
        text-overflow: ellipsis;
        display: -webkit-box;
        -webkit-box-orient: vertical;
        -webkit-line-clamp: 5;
      }
    frontend: true
    backend: false
